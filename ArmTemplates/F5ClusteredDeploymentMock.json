{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "5.1.0.0", 
    "parameters": {
        "adminUsername": {
            "defaultValue": "azureuser", 
            "metadata": {
                "description": "User name for the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "authenticationType": {
            "allowedValues": [
                "password", 
                "sshPublicKey"
            ], 
            "defaultValue": "password", 
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            }, 
            "type": "string"
        }, 
        "adminPasswordOrKey": {
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            }, 
            "type": "securestring"
        }, 
        "dnsLabel": {
            "defaultValue": "", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceName": {
            "defaultValue": "f5vm01", 
            "metadata": {
                "description": "Name of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_A3", 
                "Standard_A4", 
                "Standard_A5", 
                "Standard_A6", 
                "Standard_A7", 
                "Standard_D3", 
                "Standard_D4", 
                "Standard_D11", 
                "Standard_D12", 
                "Standard_D13", 
                "Standard_D14", 
                "Standard_DS3", 
                "Standard_DS4", 
                "Standard_DS11", 
                "Standard_DS12", 
                "Standard_DS13", 
                "Standard_DS14", 
                "Standard_D3_v2", 
                "Standard_D4_v2", 
                "Standard_D5_v2", 
                "Standard_D11_v2", 
                "Standard_D12_v2", 
                "Standard_D13_v2", 
                "Standard_D14_v2", 
                "Standard_D15_v2", 
                "Standard_DS3_v2", 
                "Standard_DS4_v2", 
                "Standard_DS5_v2", 
                "Standard_DS11_v2", 
                "Standard_DS12_v2", 
                "Standard_DS13_v2", 
                "Standard_DS14_v2", 
                "Standard_DS15_v2", 
                "Standard_F4", 
                "Standard_F8", 
                "Standard_F4S", 
                "Standard_F8S", 
                "Standard_F16S", 
                "Standard_G3", 
                "Standard_G4", 
                "Standard_G5", 
                "Standard_GS3", 
                "Standard_GS4", 
                "Standard_GS5"
            ], 
            "defaultValue": "Standard_DS3_v2", 
            "metadata": {
                "description": "Azure instance size of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "imageName": {
            "allowedValues": [
                "Good", 
                "Better", 
                "Best"
            ], 
            "defaultValue": "Best", 
            "metadata": {
                "description": "F5 SKU (image) to you want to deploy. Note: The disk size of the VM will be determined based on the option you select.  **Important**: If intending to provision multiple modules, ensure the appropriate value is selected, such as **Best** instead of **Good**."
            }, 
            "type": "string"
        }, 
        "bigIpVersion": {
            "allowedValues": [
                "13.1.0200", 
                "12.1.303000", 
                "latest"
            ], 
            "defaultValue": "13.1.0200", 
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            }, 
            "type": "string"
        }, 
        "licenseKey1": {
            "defaultValue": "", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            }, 
            "type": "string"
        }, 
        "licenseKey2": {
            "defaultValue": "", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            }, 
            "type": "string"
        }, 
        "numberOfAdditionalNics": {
            "allowedValues": [
                0, 
                1, 
                2, 
                3, 
                4, 
                5
            ], 
            "defaultValue": 0, 
            "metadata": {
                "description": "By default this solution deploys the BIG-IP(s) in a 3 NIC configuration, however additional NICs can be added to the BIG-IP(s) using this parameter.  **Note**: The default value is 0, additional NICs will only be created if 1 or higher is specified."
            }, 
            "type": "int"
        }, 
        "additionalNicLocation": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "This parameter specifies where the additional NICs go, use the default value of **OPTIONAL** if **0** was selected for the parameter **numberOfAdditionalNics**.  Otherwise this value must be a semi-colon delimited string of subnets, equal to the number of additional NICs being deployed.  For example, for 2 additional NICs you would use: **subnet01;subnet02**. **Note**: Ensure there are no spaces and the correct number of subnets are provided based on the value selected in **numberOfAdditionalNics**. **Important**: The subnet you provide for each additional NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "numberOfExternalIps": {
            "allowedValues": [
                0, 
                1, 
                2, 
                3, 
                4, 
                5, 
                6, 
                7, 
                8, 
                9, 
                10, 
                11, 
                12, 
                13, 
                14, 
                15, 
                16, 
                17, 
                18, 
                19, 
                20
            ], 
            "defaultValue": 1, 
            "metadata": {
                "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
            }, 
            "type": "int"
        }, 
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
            }, 
            "type": "string"
        }, 
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
            }, 
            "type": "string"
        }, 
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "mgmtIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the management self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
            }, 
            "type": "string"
        }, 
        "externalSubnetName": {
            "metadata": {
                "description": "Name of the existing external subnet - with external access to Internet. **Important**: The subnet you provide for the external NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "externalIpSelfAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the external self IP (primary) of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
            }, 
            "type": "string"
        }, 
        "externalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address (secondary) you would like to assign to the first shared Azure public IP. An additional private IP address will be assigned for each public IP address you specified in numberOfExternalIps.  For example, inputting 10.100.1.50 here and choosing 2 in numberOfExternalIps would result in 10.100.1.50 and 10.100.1.51 being configured as static private IP addresses for external virtual servers."
            }, 
            "type": "string"
        }, 
        "internalSubnetName": {
            "metadata": {
                "description": "Name of the existing internal subnet. **Important**: The subnet you provide for the internal NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "internalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you would like to assign to the internal self IP of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
            }, 
            "type": "string"
        }, 
        "tenantId": {
            "metadata": {
                "description": "Your Azure service principal application tenant ID."
            }, 
            "type": "string"
        }, 
        "clientId": {
            "metadata": {
                "description": "Your Azure service principal application client ID."
            }, 
            "type": "string"
        }, 
        "servicePrincipalSecret": {
            "metadata": {
                "description": "Your Azure service principal application secret."
            }, 
            "type": "securestring"
        }, 
        "managedRoutes": {
            "defaultValue": "NOT_SPECIFIED", 
            "metadata": {
                "description": "A comma-delimited list of route destinations to be managed by this cluster.  For example: 0.0.0.0/0,192.168.1.0/24. Specifying a comma-delimited list of managedRoutes and creating f5_ha and f5_tg tags on the Azure Route Table defines the UDRs to be updated. To have the UDRs managed by BIG-IP, you will need to create an Azure tag with key **f5_ha** and value **self_2nic**, or the name of a different self IP address configured on the BIG-IP VE. All UDRs with destinations matching managedRoutes and configured in Azure Route Tables tagged with 'f5_ha:' will use the corresponding self IP address on the active BIG-IP VE as the next hop for those routes. You must also associate the route table with a traffic group by creating an Azure tag with key **f5_tg** and value **traffic-group-1**, or the name of a different traffic group configured on the BIG-IP VE."
            }, 
            "type": "string"
        }, 
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org", 
            "metadata": {
                "description": "Leave the default NTP server the BIG-IP uses, or replace the default NTP server with the one you want to use."
            }, 
            "type": "string"
        }, 
        "timeZone": {
            "defaultValue": "UTC", 
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IP uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo (see the full list [here](https://github.com/F5Networks/f5-azure-arm-templates/blob/master/azure-timezone-list.md)). Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            }, 
            "type": "string"
        }, 
        "customImage": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }, 
            "type": "object"
        }, 
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes", 
                "No"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            }, 
            "type": "string"
        }
    }, 
    "variables": {
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            }, 
            "2": {
                "Port": "443"
            }, 
            "3": {
                "Port": "443"
            }, 
            "4": {
                "Port": "443"
            }, 
            "5": {
                "Port": "443"
            }, 
            "6": {
                "Port": "443"
            }
        }, 
        "bigIpVersionPortMap": {
            "12.1.303000": {
                "Port": 443
            }, 
            "13.1.0200": {
                "Port": 8443
            }, 
            "443": {
                "Port": 443
            }, 
            "latest": {
                "Port": 8443
            }
        }, 
        "computeApiVersion": "2017-12-01", 
        "networkApiVersion": "2017-11-01", 
        "storageApiVersion": "2017-10-01", 
        "location": "[resourceGroup().location]", 
        "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]", 
        "linuxConfiguration": {
            "disablePasswordAuthentication": true, 
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]", 
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        }, 
        "subscriptionID": "[subscription().subscriptionId]", 
        "resourceGroupName": "[resourceGroup().name]", 
        "singleQuote": "'", 
        "f5CloudLibsTag": "v4.1.1", 
        "f5CloudLibsAzureTag": "v2.1.0", 
        "f5NetworksTag": "v5.1.0.0", 
        "f5CloudIappsTag": "v2.0.3", 
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) dd2dbd1375f6fff639f87cd2ba781e9e09cd193c52b40a57697809a73658706f559a1825eede891590db4443cc33f89d76928f55034d352facd157e61ed3bb88\n            set hashes(f5-cloud-libs-aws.tar.gz) e06f724ff1c7fc41d95ef87fc6f7a118d7e64d5555b5e9548ee7582bc3eb8d461ca72266a0758837a951ccd465876c877329fe8a47b38da5183c832680b76b93\n            set hashes(f5-cloud-libs-azure.tar.gz) f1a5e8cfc639063885b595282cb5befdaf88d51ef62bd26e3658e2f3f3b5bbbb2ce0ba54ec1cd12ba87a2336134588affe63052511f7c6c93fb7fc73b8a0e095\n            set hashes(f5-cloud-libs-gce.tar.gz) 66072a397912a2f64ef74f2bb3fcc51c2ca90002d7df67534cf1ace031251d0a2d08f5efb492fa3c46718c65fb24234d2c863dd457e1d300b41dd6f82aca9849\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 7a4660468dffdc4f6d9aec4c1f9d22abfb3e484e7d6fe6a12fc9ab3eec3819dc34d133aea3cce4fdd87a0f4045069270061f2ea1ee7735922e4371592e498a0b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) a26d5c470e70b821621476bcfd0579dbc0964f6a54158bc6314fa1e2f63b23bf3f3eb43ade5081131c24e08579db2e1e574beb3f8d9789d28acb4f312fad8c3e\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature O+tf8OQziIu9bjatG6z35/qd8lx2wn2pgWBxRm5l2SpJ6LWuYSitk7VNqUpxz2iH/pq7Vrc8d1P/FGq4IoZUGRh5D94OHyODXc02pe/o+sla5g826xjHUrDfCAMval31cg7CRZ/htVx+bhpdiKhg4Zfypgg0USF1mKE9g8bEdvIKbPlWil4HIymEKV7gbq7ZbK86Mn0V05+B72D/k8ER/Lman0dle1XB3iHkiOBj2Qm9PPhNtvxS6ean0MDGoIrTewfIT41OSrDUd5YKrXt4Ee4YF8++8a2UBAW+UMGMibxF+vVLTxXUUM5/20goExy9yGkjHKHEVyS+9cJ40kdg9A==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5.service_discovery.tmpl f5.cloud_logger.v1.0.0.tmpl ${config_loc}f5-cloud-libs-azure.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/azure/node_modules/@f5devcentral\ntar xfz /config/cloud/f5-cloud-libs-azure.tar.gz -C /config/cloud/azure/node_modules/@f5devcentral\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "imageNameToLower": "[toLower(parameters('imageName'))]", 
        "skuToUse": "[concat('f5-bigip-virtual-edition-', variables('imageNameToLower'),'-byol')]", 
        "offerToUse": "[concat('f5-big-ip-', variables('imageNameToLower'))]", 
        "imagePlan": {
            "name": "[variables('skuToUse')]", 
            "product": "[variables('offerToUse')]", 
            "publisher": "f5-networks"
        }, 
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]", 
        "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]", 
        "instanceName": "[toLower(parameters('instanceName'))]", 
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "virtualNetworkName": "[parameters('vnetName')]", 
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]", 
        "publicIPAddressType": "Static", 
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]", 
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]", 
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]", 
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]", 
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]", 
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]", 
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]", 
        "mgmtSubnetPrivateAddressPrefixArray": "[split(parameters('mgmtIpAddressRangeStart'), '.')]", 
        "mgmtSubnetPrivateAddressPrefix": "[concat(variables('mgmtSubnetPrivateAddressPrefixArray')[0], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[1], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "mgmtSubnetPrivateAddressSuffixInt": "[int(variables('mgmtSubnetPrivateAddressPrefixArray')[3])]", 
        "mgmtSubnetPrivateAddressSuffix": "[add(variables('mgmtSubnetPrivateAddressSuffixInt'), 1)]", 
        "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddressRangeStart')]", 
        "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), variables('mgmtSubnetPrivateAddressSuffix'))]", 
        "extSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]", 
        "extSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extSelfPublicIpAddressNamePrefix'))]", 
        "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]", 
        "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]", 
        "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-ext-nsg'))]", 
        "extNicName": "[concat(variables('dnsLabel'), '-ext')]", 
        "extSubnetName": "[parameters('externalSubnetName')]", 
        "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]", 
        "extSubnetSelfPrivateAddressPrefixArray": "[split(parameters('externalIpSelfAddressRangeStart'), '.')]", 
        "extSubnetSelfPrivateAddressPrefix": "[concat(variables('extSubnetSelfPrivateAddressPrefixArray')[0], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[1], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[2], '.')]", 
        "extSubnetSelfPrivateAddressSuffixInt": "[int(variables('extSubnetSelfPrivateAddressPrefixArray')[3])]", 
        "extSubnetSelfPrivateAddressSuffix": "[add(variables('extSubnetSelfPrivateAddressSuffixInt'), 1)]", 
        "extSubnetPrivateAddress": "[parameters('externalIpSelfAddressRangeStart')]", 
        "extSubnetPrivateAddress1": "[concat(variables('extSubnetSelfPrivateAddressPrefix'), variables('extSubnetSelfPrivateAddressSuffix'))]", 
        "extSubnetPrivateAddressPrefixArray": "[split(parameters('externalIpAddressRangeStart'), '.')]", 
        "extSubnetPrivateAddressPrefix": "[concat(variables('extSubnetPrivateAddressPrefixArray')[0], '.', variables('extSubnetPrivateAddressPrefixArray')[1], '.', variables('extSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "extSubnetPrivateAddressSuffixInt": "[int(variables('extSubnetPrivateAddressPrefixArray')[3])]", 
        "extSubnetPrivateAddressSuffix0": "[add(variables('extSubnetPrivateAddressSuffixInt'), 1)]", 
        "extSubnetPrivateAddressSuffix1": "[add(variables('extSubnetPrivateAddressSuffixInt'), 2)]", 
        "intNicName": "[concat(variables('dnsLabel'), '-int')]", 
        "intSubnetName": "[parameters('internalSubnetName')]", 
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]", 
        "intSubnetPrivateAddress": "[parameters('internalIpAddressRangeStart')]", 
        "intSubnetPrivateAddress1": "[concat(variables('intSubnetPrivateAddressPrefix'), variables('intSubnetPrivateAddressSuffix'))]", 
        "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]", 
        "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]", 
        "intSubnetPrivateAddressSuffix": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]", 
        "extSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('externalSubnetName'))]", 
        "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]", 
        "addtlNicName": "[concat(variables('dnsLabel'), '-addtlnic')]", 
        "addtlNicFillerArray": [
            "filler01", 
            "filler02", 
            "filler03", 
            "filler04", 
            "filler05"
        ], 
        "addtlNicRefSplit": "[concat(split(parameters('additionalNicLocation'), ';'), variables('addtlNicFillerArray'))]", 
        "netCmd00": "[concat('')]", 
        "netCmd01": "[concat(' --vlan name:', variables('addtlNicRefSplit')[0], ',nic:1.3')]", 
        "netCmd02": "[concat(variables('netCmd01'), ' --vlan name:', variables('addtlNicRefSplit')[1], ',nic:1.4')]", 
        "netCmd03": "[concat(variables('netCmd02'), ' --vlan name:', variables('addtlNicRefSplit')[2], ',nic:1.5')]", 
        "netCmd04": "[concat(variables('netCmd03'), ' --vlan name:', variables('addtlNicRefSplit')[3], ',nic:1.6')]", 
        "netCmd05": "[concat(variables('netCmd04'), ' --vlan name:', variables('addtlNicRefSplit')[4], ',nic:1.7')]", 
        "netCmd": "[variables(concat('netCmd0', parameters('numberOfAdditionalNics')))]", 
        "numberOfExternalIps": "[parameters('numberOfExternalIps')]", 
        "mgmtRouteGw": "`tmsh list sys management-route default gateway | grep gateway | sed 's/gateway //;s/ //g'`", 
        "routeCmdArray": {
            "12.1.303000": "[concat('tmsh create sys management-route waagent_route network 168.63.129.16/32 gateway ', variables('mgmtRouteGw'), '; tmsh save sys config')]", 
            "13.1.0200": "route", 
            "latest": "route"
        }, 
        "selfNicConfigArray": {
            "0": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '0'))]", 
                    "properties": {
                        "primary": true
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('extNicName'), '0'))]", 
                    "properties": {
                        "primary": false
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '0'))]", 
                    "properties": {
                        "primary": false
                    }
                }
            ], 
            "1": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '1'))]", 
                    "properties": {
                        "primary": true
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('extNicName'), '1'))]", 
                    "properties": {
                        "primary": false
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '1'))]", 
                    "properties": {
                        "primary": false
                    }
                }
            ]
        }, 
        "addtlNicConfigArray": {
            "copy": [
                {
                    "count": 5, 
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values0', 1), '0'))]", 
                        "properties": {
                            "primary": false
                        }
                    }, 
                    "name": "values0"
                }, 
                {
                    "count": 5, 
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values1', 1), '1'))]", 
                        "properties": {
                            "primary": false
                        }
                    }, 
                    "name": "values1"
                }
            ]
        }, 
        "failoverCmdArray": {
            "12.1.303000": "echo \"Failover db variable not required.\"", 
            "13.1.0200": "tmsh modify sys db failover.selinuxallowscripts value enable", 
            "latest": "tmsh modify sys db failover.selinuxallowscripts value enable"
        }, 
        "tagValues": "[parameters('tagValues')]", 
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]", 
        "dataStorageAccountType": "Standard_LRS", 
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]", 
        "allowUsageAnalytics": {
            "No": {
                "hashCmd": "echo AllowUsageAnalytics:No", 
                "metricsCmd": ""
            }, 
            "Yes": {
                "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]", 
                "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:failover-api-existing_stack-supported,templateVersion:5.1.0.0,region:', variables('location'), ',bigIpVersion:', parameters('bigIpVersion') ,',licenseType:BYOL,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
            }
        }, 
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]", 
        "useCustomImage": "[not(empty(variables('customImage')))]", 
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]", 
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]", 
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            }, 
            "platformImage": {
                "imageReference": {
                    "offer": "[variables('offerToUse')]", 
                    "publisher": "f5-networks", 
                    "sku": "[variables('skuToUse')]", 
                    "version": "[parameters('bigIpVersion')]"
                }, 
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        }, 
        "premiumInstanceArray": [
            "Standard_DS2", 
            "Standard_DS3", 
            "Standard_DS4", 
            "Standard_DS11", 
            "Standard_DS12", 
            "Standard_DS13", 
            "Standard_DS14", 
            "Standard_DS2_v2", 
            "Standard_DS3_v2", 
            "Standard_DS4_v2", 
            "Standard_DS5_v2", 
            "Standard_DS11_v2", 
            "Standard_DS12_v2", 
            "Standard_DS13_v2", 
            "Standard_DS14_v2", 
            "Standard_DS15_v2", 
            "Standard_F2S", 
            "Standard_F4S", 
            "Standard_F8S", 
            "Standard_F16S", 
            "Standard_GS2", 
            "Standard_GS3", 
            "Standard_GS4", 
            "Standard_GS5"
        ], 
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n", 
        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
    }, 
    "resources": [ 
        {
            "apiVersion": "2016-04-30-preview",
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[concat(parameters('dnsLabel'), '-mock-as')]",
            "location": "[variables('location')]", 
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2,
                "virtualMachines": []
            },
            "tags": {},
            "sku": {
                "name": "Aligned"
            }
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
            "value": "SEE_AZURE"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "SEE_AZURE"
        }
    }
}